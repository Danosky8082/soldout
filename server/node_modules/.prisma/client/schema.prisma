// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeType {
  LIKE
  DISLIKE
}

enum VideoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  password             String
  firstName            String
  lastName             String
  bio                  String?
  profilePicture       String?
  isAdmin              Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  lastLogin            DateTime?
  videos               Video[]
  comments             Comment[]
  replies              Reply[]
  likes                Like[]
  subscriptions        Subscription[] @relation("UserSubscriptions")
  creatorSubscriptions Subscription[] @relation("CreatorSubscriptions")
  ratings              Rating[]
  trivia               Trivia[]
  wishlist             Wishlist[] // ✅ relation to wishlist
  role                 Role           @default(USER)
  isBanned             Boolean        @default(false)
}

model Video {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  genre           String
  year            Int
  thumbnail       String
  videoUrl        String
  status          VideoStatus    @default(PENDING)
  userId          Int
  user            User           @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  views           Int            @default(0)
  comments        Comment[]
  likes           Like[]
  subscriptions   Subscription[]
  replies         Reply[]
  ratings         Rating[]
  trivia          Trivia[]
  wishlists       Wishlist[] // ✅ relation to wishlist

  @@index([userId])
  @@index([genre])
  @@index([status])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  videoId   Int
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]
  likes     Like[]

  @@index([userId])
  @@index([videoId])
}

model Reply {
  id            Int      @id @default(autoincrement())
  text          String
  userId        Int
  commentId     Int
  videoId       Int
  user          User     @relation(fields: [userId], references: [id])
  comment       Comment  @relation(fields: [commentId], references: [id])
  video         Video    @relation(fields: [videoId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parent        Reply?   @relation("Replies", fields: [parentReplyId], references: [id])
  parentReplyId Int?
  replies       Reply[]  @relation("Replies")
  likes         Like[]

  @@index([userId])
  @@index([commentId])
  @@index([videoId])
  @@index([parentReplyId])
}

model Like {
  id        Int      @id @default(autoincrement())
  type      LikeType
  userId    Int
  videoId   Int?
  commentId Int?
  replyId   Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, videoId, type])
  @@unique([userId, commentId, type])
  @@unique([userId, replyId, type])
  @@index([videoId])
  @@index([commentId])
  @@index([replyId])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  creatorId Int
  creator   User     @relation("CreatorSubscriptions", fields: [creatorId], references: [id], onDelete: Cascade)
  videoId   Int?
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, creatorId])
  @@index([userId])
  @@index([creatorId])
  @@index([videoId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  userId    Int
  videoId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model Trivia {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  videoId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([videoId])
  @@index([userId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  videoId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId]) // prevent same video twice
  @@index([userId])
  @@index([videoId])
}
